package net.idea.opentox.cli.csv;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public abstract class CSVFeatureValuesIterator<PROPERTY> implements Iterator<PROPERTY> {
	protected InputStream in = null;
	protected HttpURLConnection uc;
	protected BufferedReader reader;
	protected List<String> header ;
	protected List<Object> values ;
	
	public CSVFeatureValuesIterator(String url) throws Exception {
		super();
		String line = null;
		values = new ArrayList<Object>();
		try {
		//	uc = ClientResourceWrapper.getHttpURLConnection(url,"GET","text/csv");
			uc.setDoOutput(true);
			uc.setRequestMethod("GET");
			int code = uc.getResponseCode();
			
			if (code==200) {

				in= uc.getInputStream();
				reader = new BufferedReader(new InputStreamReader(in,"UTF-8"));
				header = new ArrayList<String>();
				while ((line = reader.readLine())!=null) {
					
					QuotedTokenizer st = new QuotedTokenizer(line,',');
					while (st.hasMoreTokens()) header.add(st.nextToken().trim());

					break;

				}
				return ;
			} else throw new Exception(uc.getResponseMessage());	
			
		} catch (Exception x) {
			try { if (in != null) in.close(); } catch (Exception xx) {}
			try { if (uc != null) uc.disconnect(); } catch (Exception xx) {}
			throw x;
		} finally {
			//closing withn close() , not here
		}
	}

	public boolean hasNext() {
		String line;
		try {
			while ((line = reader.readLine())!=null) {
				values.clear();
				/**
				 * hack to cope with toxtree html formatting for alerts - need to be fixed in toxtree
				 * <pre>
				 * <a href='#' onClick="changeImage('compound_uri','/hilight?parameters=SA34')">
				 * </pre>
				 * <pre>
				 * Images are generated by
				 * http://apps.ideaconsult.net:8080/ambit2/model/48?dataset_uri=http://apps.ideaconsult.net:8080/ambit2/compound/684/conformer/144514&media=image/png&parameters=1
				 * </pre>
				 */
				//line = line.replace(")\">", ")\'>").replace("onClick=\"changeImage(", "onClick='changeImage(");
				
				line = line.replace(")\">", ">");
				line = line.replace("' onClick=\"changeImage('compound_uri','/hilight", "");
				line = line.replace("<a href='#?","<a href='#View results//");
				// <a href='#View%20results//'parameters=1'
				QuotedTokenizer st = new QuotedTokenizer(line,',');
	
				while (st.hasMoreTokens()) {
					String value = st.nextToken().trim();
					if ("".equals(value)) values.add(value);
					else //guess type

					try {
						values.add(Integer.parseInt(value));
					} catch (Exception x) {
						try {
							values.add(Double.parseDouble(value));
						} catch (Exception xx) {
							values.add(value);	
						}
					}
				}
				
				return true;
			}
		} catch (Exception x) {
			x.printStackTrace();
		}
		return false;
	}

	public PROPERTY next() {
		return transformRawValues(header, values);
	}
	public abstract PROPERTY transformRawValues(List<String> header,List<Object> values);

	public void remove() {
			
	}
	public void close() {
		try { if (in != null) in.close(); } catch (Exception x) {}
		try { if (uc != null) uc.disconnect(); } catch (Exception x) {}
	}
	
	
	public static synchronized HttpURLConnection getHttpURLConnection(String uri, String method, String mediaType) throws IOException, MalformedURLException {
    	URL url = null;
    	
    	try {
    		url = new URL(uri);
    	} catch (MalformedURLException x) {
    		throw x;
    	}		
    	HttpURLConnection uc = (HttpURLConnection) url.openConnection();
		uc.addRequestProperty("Accept",mediaType);
		uc.setDoOutput(true);
		uc.setRequestMethod(method);    	
		/*
		IAuthToken tokenFactory = ClientResourceWrapper.getTokenFactory();
		String token = tokenFactory==null?null:tokenFactory.getToken();
		if (token!=null) uc.addRequestProperty("subjectid", token);
		*/
		return uc;
	}
}
